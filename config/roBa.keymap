#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define ZMK_MOUSE_DEFAULT_SCRL_VAL 100

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <1>;

    arrows {
        layers = <3>;
        bindings =
            <&kp RIGHT_ARROW>,
            <&kp LEFT_ARROW>,
            <&kp UP_ARROW>,
            <&kp DOWN_ARROW>;

        tick = <10>;
        wait-ms = <5>;
        tap-ms = <5>;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        comma {
            bindings = <&kp COMMA>;
            key-positions = <18 19>;
            layers = <0>;
        };

        dot {
            bindings = <&kp PERIOD>;
            key-positions = <19 20>;
            layers = <0>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        blendermb3shift: blendermb3shift {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT &mkp MB3>;
            label = "BLENDERMB3SHIFT";
        };

        audioswitchzg02: audioswitchzg02 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LC(LA(Z))) &kp LS(LA(LC(X)))>;
            label = "AUDIOSWITCHZG02";
        };

        audioswitchliberty5: audioswitchliberty5 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(L)))>;
            label = "AUDIOSWITCHLIBERTY5";
        };
    };

    behaviors {
        scroll_up_down: behavior_sensor_rotate_mouse_wheel_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

            // 追加: スクロールのタップ時間を設定 (20ms)

            tap-ms = <20>;
        };

        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        kpmkp: kpmkp {
            compatible = "zmk,behavior-hold-tap";
            label = "KPMKP";
            bindings = <&kp>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <10>;
        };

        momkp: momkp {
            compatible = "zmk,behavior-hold-tap";
            label = "MOMKP";
            bindings = <&mo>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <50>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R        &kp T                                               &kp Y            &kp U  &kp I             &kp O           &kp P
&kp A             &kp S         &kp D         &kp F        &kp G      &mkp MB3                    &to 6        &kp H            &kp J  &kp K             &kp L           &lt 4 MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V        &kp B      &mkp MB4                    &mkp MB5     &kp N            &kp M  &kp INT_MUHENKAN  &kp INT_HENKAN  &mt LEFT_SHIFT SLASH
&mt LCTRL TAB     &kp LEFT_WIN  &kp LEFT_ALT  &lt 1 SPACE  &mkp LCLK  &kpmkp LEFT_SHIFT RCLK      &lt 2 ENTER  &lt 3 BACKSPACE                                           &kp ESCAPE
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        NUM {
            bindings = <
&kp F9  &kp F10  &kp F11  &kp F12  &kp PLUS                                                    &kp CARET            &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp ASTERISK
&kp F5  &kp F6   &kp F7   &kp F8   &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp TILDE        &kp PLUS             &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp MINUS
&kp F1  &kp F2   &kp F3   &kp F4   &kp PERIOD    &kp EQUAL                    &kp COLON        &kp PERIOD           &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp SLASH
&trans  &trans   &trans   &trans   &trans        &trans                       &kp KP_NUMBER_0  &mt LCTRL BACKSPACE                                                     &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &audioswitchzg02        &audioswitchliberty5  &kp LC(TAB)              &trans                       &trans    &kp HOME  &kp UP    &kp END    &trans
&kp HOME        &bt BT_SEL 0            &bt BT_SEL 1          &bt BT_SEL 2             &kp END  &trans      &trans  &kp HOME  &kp LEFT  &kp DOWN  &kp RIGHT  &kp LC(T)
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans                &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans    &trans    &trans    &trans     &trans
&trans          &trans                  &trans                &trans                   &trans   &trans      &trans  &trans                                   &trans
            >;

            sensor-bindings = <&inc_dec_kp LA(LC(LG(LEFT_ARROW))) LA(LC(LG(RIGHT_ARROW)))>;
        };

        MARk {
            bindings = <
&kp LSHFT  &trans  &kp LBKT      &kp RBKT      &kp RBKT                       &kp F1  &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &kp LS(RPAR)
&trans     &trans  &kp LS(LPAR)  &kp LS(RPAR)  &kp N0    &trans      &kp ESC  &kp F6  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp F10
&trans     &trans  &kp SEMI      &kp APOS      &kp DOT   &trans      &trans   &kp N0  &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp QUESTION
&trans     &trans  &trans        &trans        &trans    &trans      &trans   &trans                                              &kp F12
            >;

            sensor-bindings = <&inc_dec_kp LS(LC(LG(NUMBER_1))) LS(LC(LG(NUMBER_2)))>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                &trans
            >;
        };

        Ohnisi {
            bindings = <
&kp Q          &kp L         &kp U         &kp COMMA    &kp DOT                                             &kp F            &kp W  &kp R  &kp Y  &kp P
&kp E          &kp I         &kp A         &kp O        &kp MINUS  &mkp MB3                    &to 6        &kp K            &kp T  &kp N  &kp S  &kp H
&kp Z          &kp X         &kp C         &kp V        &kp SEMI   &mkp MB4                    &mkp MB5     &kp G            &kp D  &kp M  &kp J  &kp B
&mt LCTRL TAB  &kp LEFT_GUI  &kp LEFT_ALT  &lt 1 SPACE  &mkp LCLK  &kpmkp LEFT_SHIFT RCLK      &lt 2 ENTER  &lt 3 BACKSPACE                       &kp ESC
            >;

            sensor-bindings = <&scroll_up_down>;
        };

        layer_6 {
            bindings = <
&kp Q  &kp W  &kp Y      &kp Q           &kp Q                                           &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&kp D  &kp D  &mkp MCLK  &kp LEFT_SHIFT  &kp D      &kp ESCAPE                  &to 0    &kp D         &mt LEFT_SHIFT X  &kp Z         &kp D         &kp D
&kp D  &kp D  &kp D      &kp D           &kp D      &kp D                       &kp D    &kp J         &kp D             &kp D         &kp D         &bt BT_CLR
&kp D  &kp D  &kp D      &lt 1 SPACE     &mkp LCLK  &kpmkp LEFT_SHIFT RCLK      &kp RET  &kp X                                                       &bt BT_CLR_ALL
            >;

            sensor-bindings = <&scroll_up_down>;
        };
    };
};
